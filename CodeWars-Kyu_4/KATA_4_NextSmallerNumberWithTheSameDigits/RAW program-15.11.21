using System.Runtime.InteropServices;
using System.ComponentModel;
using System.Collections.Generic;
using System.Linq;
using System;
using System.Collections;
using System.Diagnostics;

namespace KATA4NextSmallerNumberWithTheSameDigits
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Hello World!");
            long test1 = 36119868601116; //36119868166110

            Stopwatch stopWatch = new Stopwatch();
            stopWatch.Start();

            long out1 = Kata.NextSmaller(test1);

            stopWatch.Stop();

            // Get the elapsed time as a TimeSpan value.
            TimeSpan ts = stopWatch.Elapsed;

            // Format and display the TimeSpan value.
            string elapsedTime = String.Format("{0:00}:{1:00}:{2:00}.{3:00}",
            ts.Hours, ts.Minutes, ts.Seconds, ts.Milliseconds / 10);
            
            
        }
    }

//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    public class Kata
    {
        public static List<long> lstPermute = new List<long>();
        public static int listCounter = 0;
        public static long LAST_GLOB = 0;
        public static long ORIGINAL_N =0;

        public static long NextSmaller(long n)
        {
            ORIGINAL_N = n;
            LAST_GLOB = 0;
            bool swapAllow = false;
            bool oneDigitOnly;
            bool risedNumbers;
            string nString = n.ToString();
            long result = 0;

            string nStr = n.ToString();

            //lenght of Char Array
            int nArrLong = FindNumberOfDigit(n);

            //int number as Char Array
            char[] nArrChar = new char[nArrLong];
            nArrChar = nString.ToCharArray();

            int[] nArrInt = new int[nArrLong];
            nArrInt = Array.ConvertAll(nArrChar, c => (int)Char.GetNumericValue(c));

            //int last = nArrLong -1;
            Dictionary<int, int> nDiff = new Dictionary<int, int>();
            int nBuff;
            int accu1 = 0;
            int accu2 = 0;
            int init = 0;
            long originN = n;
            long currentN = 0;
            long lastN = 0;
            int loops = 0;
            int buffor;
            int resultDigits = 0;
            int _pStrInd = 0;
            
            char[] nArrCharOrigin = new char[nArrLong];
            Array.Copy(nArrChar, nArrCharOrigin , nArrLong);

            //check if smaller number do not exist
            oneDigitOnly = NoSmaller(n);
            risedNumbers = IsRisedOrEqual(nArrInt);
            _pStrInd = PermuteStartIndex(nArrInt);


            if (oneDigitOnly == true || risedNumbers == true)
            {
                return -1;
            }
            else
            {   //for numbers equal or longer than 2 digits

                // if(nArrLong - _pStrInd >= 8)
                // {
                //     return -1;
                // }


                if (nArrLong >= 2)
                {
                 //Permutes(nStr, _pStrInd, nArrLong-1, accu1, n);

                SmallerFromArray(_pStrInd, ref nArrInt);

                }
                long resL = IntArrayToLong(nArrInt);
                //return resL;

                //long resL = Convert.ToInt64(result);
                resultDigits = FindNumberOfDigit(resL);

                if (resL < n && nArrLong == resultDigits)
                {
                    return resL;
                }
                return -1;
            }
        }
        //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        private static int PermuteStartIndex(int[] n)
        {
            int counter = 0;
            int nLen = n.Count() - 1;

            for (int i = nLen - 1; i >= 0; i--)
            {
                if (n[i] > n[i+1])
                {
                    return i ;
                }
            }

            return 0;
        }
        //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        private static bool IsRisedOrEqual(int[] n)
        {
            int counter = 0;

            foreach (var item in n)
            {
                if (counter >= 1)
                {
                    if (item < n[counter-1])
                    {
                        return false;
                    }
                }

                counter ++;
            }
            return true;
        }

        //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

        /// <summary>
        /// Permutation method
        /// </summary>
        /// <param name="str"></param>
        /// <param name="l">l starting index</param>
        /// <param name="r">r end index</param>
        public static void Permutes(string str, int l, int r, long last, long origin)
        {
            long current = Convert.ToInt64(str);
            if (l == r)
            {
                if (listCounter >=1000)
                {
                    if(listCounter == 300)
                    {
                    Console.WriteLine("!!!!!");
                    }
                }
                else
                {
                    if (ORIGINAL_N > current && current > LAST_GLOB)
                    {
                        LAST_GLOB = current;
                    }

                Console.WriteLine(str);
                //lstPermute.Add(strLong);
                //retList.Add(strLong);
                listCounter++;
                }



            }
            else 
            {
                for (int i = l; i <= r; i++) 
                {
                    str = swap(str, l, i);
                    Permutes(str, l + 1, r, last, origin);
                    str = swap(str, l, i);

                }
            }

        }
        //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        public static String swap(String a, int i, int j)
        {
            char temp;
            char[] charArray = a.ToCharArray();
            temp = charArray[i];
            charArray[i] = charArray[j];
            charArray[j] = temp;
            string s = new string(charArray);
            return s;
        }
        //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        public static bool NoSmaller(long n)
        {
            int CountDigits = n.ToString().Count();
            if(CountDigits == 1)
            {
                return true;
            }
            return false;
        }
        //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        private static int FindNumberOfDigit(long number)
        {
    int count = 0;
            while (number > 0)
            {
                number /= 10;
                count++;
            }
            return count;
        }
    //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        //public delegate ref TResult RefReturningFunc<TParameter, TResult>(TParameter param);

        /// <summary>
        /// Swap the values in positions 1 and 2 with each other. 
        /// </summary>
        /// <param name="input">Input Array</param>
        /// <param name="pos1">Position 1 in array.</param>
        /// <param name="pos2">Position 2 in array.</param>
        /// <typeparam name="TInput">This is the first generic argument.</typeparam>
        public static void SwapPositionsInArray<TInput>(ref TInput[] input, int pos1, int pos2)
        {
            TInput buff =  input[pos1];

            input[pos1] = input[pos2];
            input[pos2] = buff;
        }

    //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        public static int Factorial(int f)
        {
        if(f == 0)
            return 1;
        else
            return f * Factorial(f-1); 
        }
        //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        public static int CombinationWithoutRepetition(int n, int k)
        {
            int nFactor = Factorial(n);
            int kFactor = Factorial(k);

            int result= nFactor / (kFactor * Factorial(n-k));
            return result;

        }
        //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        public static void SmallerFromArray(int strtIndex, ref int[] input)
        {
            int inLen = input.Count() - 1;
            int? accu1 = null;
            int accu2 = 0;
            int i1_C = 0;
            int indexStart = strtIndex;
            bool trig = false;

            for (int i1 = indexStart; i1 < inLen; i1++)
            {
                i1_C++;
                accu1 = null;
                accu2 = 0;

                for (int i2 = indexStart + i1_C ; i2 <= inLen; i2++)
                {
                    

                    if(i1 == indexStart) //trig != true &&
                    {
                        if (input[i2] < input[i1] && input[i2] >= accu2)
                        {
                            accu1 = i2;
                            accu2 = input[i2];
                           //trig = true;
                        }
                    }
                    else if(i1 != indexStart) //trig == true &&
                    {
                        if (input[i2] > input[i1] && input[i2] >= accu2)
                        {
                            accu1 = i2;
                            accu2 = input[i2];
                            //trig = true;
                        }
                    }
                }

                if (accu1 != null)
                {
                    accu2 = accu1 ?? default(int); 
                    SwapPositionsInArray(ref input, i1, accu2);
                }

                
                //input[i1] = accu1;
            }
            //return accu1;
        }
        //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

        public static long IntArrayToLong(int[] input)
        {
            string strAccu1;
            long outt = 0;

            strAccu1 = string.Join("",input);//input.ToString();
            outt = Convert.ToInt64(strAccu1);

            return outt;
        }
    }
}

